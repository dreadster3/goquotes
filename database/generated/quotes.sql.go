// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: quotes.sql

package generated

import (
	"context"
)

const createQuote = `-- name: CreateQuote :one
INSERT INTO tb_quotes (quote) VALUES (?) RETURNING id, quote
`

func (q *Queries) CreateQuote(ctx context.Context, quote string) (TbQuote, error) {
	row := q.db.QueryRowContext(ctx, createQuote, quote)
	var i TbQuote
	err := row.Scan(&i.ID, &i.Quote)
	return i, err
}

const getQuotes = `-- name: GetQuotes :many
SELECT id, quote FROM tb_quotes
`

func (q *Queries) GetQuotes(ctx context.Context) ([]TbQuote, error) {
	rows, err := q.db.QueryContext(ctx, getQuotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbQuote
	for rows.Next() {
		var i TbQuote
		if err := rows.Scan(&i.ID, &i.Quote); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomQuote = `-- name: GetRandomQuote :one
SELECT id, quote FROM tb_quotes ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomQuote(ctx context.Context) (TbQuote, error) {
	row := q.db.QueryRowContext(ctx, getRandomQuote)
	var i TbQuote
	err := row.Scan(&i.ID, &i.Quote)
	return i, err
}
